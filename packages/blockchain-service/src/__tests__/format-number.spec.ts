import { BSNumberHelper } from '../helpers/BSNumberHelper'

describe('BSNumberHelper', () => {
  describe('formatNumber', () => {
    it('Should format the numbers with decimals', () => {
      expect(BSNumberHelper.formatNumber(1, { decimals: 24 })).toBe('1')
      expect(BSNumberHelper.formatNumber(1.23, { decimals: 24 })).toBe('1.23')
      expect(BSNumberHelper.formatNumber(0.31, { decimals: 24 })).toBe('0.31')
      expect(BSNumberHelper.formatNumber(0.0031, { decimals: 24 })).toBe('0.0031')
      expect(BSNumberHelper.formatNumber(0.888, { decimals: 24 })).toBe('0.888')
      expect(BSNumberHelper.formatNumber(0.0000005, { decimals: 24 })).toBe('0.0000005')
      expect(BSNumberHelper.formatNumber('51.6560056', { decimals: 24 })).toBe('51.6560056')
      expect(BSNumberHelper.formatNumber('000.2323230000', { decimals: 24 })).toBe('0.232323')
      expect(BSNumberHelper.formatNumber('003451.44444400', { decimals: 24 })).toBe('3451.444444')
      expect(
        BSNumberHelper.formatNumber('00345.1.44444400000000000000000000000000000000000000000', { decimals: 24 })
      ).toBe('345.1444444')
      expect(
        BSNumberHelper.formatNumber('00345.1.44444400000000000000000000000000000000000000020', { decimals: 24 })
      ).toBe('345.1444444')
      expect(
        BSNumberHelper.formatNumber('00345.1.44444400000200000000000000000000000000000000020', { decimals: 24 })
      ).toBe('345.1444444000002')
      expect(BSNumberHelper.formatNumber('00345.1.1444444000000000000000210000000000000000020', { decimals: 24 })).toBe(
        '345.114444440000000000000002'
      )
      expect(BSNumberHelper.formatNumber('23,2323,2323000', { decimals: 24 })).toBe('23.23232323')
      expect(BSNumberHelper.formatNumber('00.1', { decimals: 24 })).toBe('0.1')
      expect(BSNumberHelper.formatNumber('.1', { decimals: 24 })).toBe('0.1')
      expect(BSNumberHelper.formatNumber('231.', { decimals: 24 })).toBe('231')
      expect(BSNumberHelper.formatNumber('.1.', { decimals: 24 })).toBe('0.1')
      expect(BSNumberHelper.formatNumber('4', { decimals: 24 })).toBe('4')
      expect(BSNumberHelper.formatNumber('12asdasd312', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber(0, { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('.', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('2.2', { decimals: 24 })).toBe('2.2')
      expect(BSNumberHelper.formatNumber('.0', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('0.', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('1.', { decimals: 24 })).toBe('1')
      expect(BSNumberHelper.formatNumber('00023.002323000000', { decimals: 24 })).toBe('23.002323')
      expect(BSNumberHelper.formatNumber(undefined, { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber(',', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber(NaN, { decimals: 24 })).toBe('0')

      expect(BSNumberHelper.formatNumber(-1, { decimals: 24 })).toBe('-1')
      expect(BSNumberHelper.formatNumber(-1.23, { decimals: 24 })).toBe('-1.23')
      expect(BSNumberHelper.formatNumber(-0.31, { decimals: 24 })).toBe('-0.31')
      expect(BSNumberHelper.formatNumber(-0.0031, { decimals: 24 })).toBe('-0.0031')
      expect(BSNumberHelper.formatNumber(-0.888, { decimals: 24 })).toBe('-0.888')
      expect(BSNumberHelper.formatNumber(-0.0000005, { decimals: 24 })).toBe('-0.0000005')
      expect(BSNumberHelper.formatNumber('-51.6560056', { decimals: 24 })).toBe('-51.6560056')
      expect(BSNumberHelper.formatNumber('-000.2323230000', { decimals: 24 })).toBe('-0.232323')
      expect(BSNumberHelper.formatNumber('-003451.44444400', { decimals: 24 })).toBe('-3451.444444')
      expect(
        BSNumberHelper.formatNumber('-00345.1.44444400000000000000000000000000000000000000000', { decimals: 24 })
      ).toBe('-345.1444444')
      expect(
        BSNumberHelper.formatNumber('-00345.1.44444400000000000000000000000000000000000000020', { decimals: 24 })
      ).toBe('-345.1444444')
      expect(
        BSNumberHelper.formatNumber('-00345.1.44444400000200000000000000000000000000000000020', { decimals: 24 })
      ).toBe('-345.1444444000002')
      expect(
        BSNumberHelper.formatNumber('-00345.1.1444444000000000000000210000000000000000020', { decimals: 24 })
      ).toBe('-345.114444440000000000000002')
      expect(BSNumberHelper.formatNumber('-23,2323,2323000', { decimals: 24 })).toBe('-23.23232323')
      expect(BSNumberHelper.formatNumber('-00.1', { decimals: 24 })).toBe('-0.1')
      expect(BSNumberHelper.formatNumber('-.1', { decimals: 24 })).toBe('-0.1')
      expect(BSNumberHelper.formatNumber('-231.', { decimals: 24 })).toBe('-231')
      expect(BSNumberHelper.formatNumber('-.1.', { decimals: 24 })).toBe('-0.1')
      expect(BSNumberHelper.formatNumber('-4', { decimals: 24 })).toBe('-4')
      expect(BSNumberHelper.formatNumber('-12asdasd312', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('-', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber(-0, { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('-.', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('-2.2', { decimals: 24 })).toBe('-2.2')
      expect(BSNumberHelper.formatNumber('-.0', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('-0.', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('-1.', { decimals: 24 })).toBe('-1')
      expect(BSNumberHelper.formatNumber('-00023.002323000000', { decimals: 24 })).toBe('-23.002323')
      expect(BSNumberHelper.formatNumber(undefined, { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber('-,', { decimals: 24 })).toBe('0')
      expect(BSNumberHelper.formatNumber(NaN, { decimals: 24 })).toBe('0')
    })

    it('Should format the numbers without decimals', () => {
      expect(BSNumberHelper.formatNumber(1)).toBe('1')
      expect(BSNumberHelper.formatNumber(1.23)).toBe('1')
      expect(BSNumberHelper.formatNumber(0.31)).toBe('0')
      expect(BSNumberHelper.formatNumber(0.0031)).toBe('0')
      expect(BSNumberHelper.formatNumber(0.888)).toBe('0')
      expect(BSNumberHelper.formatNumber(0.0000005)).toBe('0')
      expect(BSNumberHelper.formatNumber('51.6560056')).toBe('51')
      expect(BSNumberHelper.formatNumber('000.2323230000')).toBe('0')
      expect(BSNumberHelper.formatNumber('003451.44444400')).toBe('3451')
      expect(BSNumberHelper.formatNumber('00345.1.44444400000000000000000000000000000000000000000')).toBe('345')
      expect(BSNumberHelper.formatNumber('00345.1.44444400000000000000000000000000000000000000020')).toBe('345')
      expect(BSNumberHelper.formatNumber('00345.1.44444400000200000000000000000000000000000000020')).toBe('345')
      expect(BSNumberHelper.formatNumber('00345.1.1444444000000000000000210000000000000000020')).toBe('345')
      expect(BSNumberHelper.formatNumber('23,2323,2323000')).toBe('23')
      expect(BSNumberHelper.formatNumber('00.1')).toBe('0')
      expect(BSNumberHelper.formatNumber('.1')).toBe('0')
      expect(BSNumberHelper.formatNumber('231.')).toBe('231')
      expect(BSNumberHelper.formatNumber('.1.')).toBe('0')
      expect(BSNumberHelper.formatNumber('4')).toBe('4')
      expect(BSNumberHelper.formatNumber('12asdasd312')).toBe('0')
      expect(BSNumberHelper.formatNumber('')).toBe('0')
      expect(BSNumberHelper.formatNumber(0)).toBe('0')
      expect(BSNumberHelper.formatNumber('.')).toBe('0')
      expect(BSNumberHelper.formatNumber('2.2')).toBe('2')
      expect(BSNumberHelper.formatNumber('.0')).toBe('0')
      expect(BSNumberHelper.formatNumber('0.')).toBe('0')
      expect(BSNumberHelper.formatNumber('1.')).toBe('1')
      expect(BSNumberHelper.formatNumber('00023.002323000000')).toBe('23')
      expect(BSNumberHelper.formatNumber()).toBe('0')
      expect(BSNumberHelper.formatNumber(',')).toBe('0')
      expect(BSNumberHelper.formatNumber(NaN)).toBe('0')

      expect(BSNumberHelper.formatNumber(-1)).toBe('-1')
      expect(BSNumberHelper.formatNumber(-1.23)).toBe('-1')
      expect(BSNumberHelper.formatNumber(-0.31)).toBe('0')
      expect(BSNumberHelper.formatNumber(-0.0031)).toBe('0')
      expect(BSNumberHelper.formatNumber(-0.888)).toBe('0')
      expect(BSNumberHelper.formatNumber(-0.0000005)).toBe('0')
      expect(BSNumberHelper.formatNumber('-51.6560056')).toBe('-51')
      expect(BSNumberHelper.formatNumber('-000.2323230000')).toBe('0')
      expect(BSNumberHelper.formatNumber('-003451.44444400')).toBe('-3451')
      expect(BSNumberHelper.formatNumber('-00345.1.44444400000000000000000000000000000000000000000')).toBe('-345')
      expect(BSNumberHelper.formatNumber('-00345.1.44444400000000000000000000000000000000000000020')).toBe('-345')
      expect(BSNumberHelper.formatNumber('-00345.1.44444400000200000000000000000000000000000000020')).toBe('-345')
      expect(BSNumberHelper.formatNumber('-00345.1.1444444000000000000000210000000000000000020')).toBe('-345')
      expect(BSNumberHelper.formatNumber('-23,2323,2323000')).toBe('-23')
      expect(BSNumberHelper.formatNumber('-00.1')).toBe('0')
      expect(BSNumberHelper.formatNumber('-.1')).toBe('0')
      expect(BSNumberHelper.formatNumber('-231.')).toBe('-231')
      expect(BSNumberHelper.formatNumber('-.1.')).toBe('0')
      expect(BSNumberHelper.formatNumber('-4')).toBe('-4')
      expect(BSNumberHelper.formatNumber('-12asdasd312')).toBe('0')
      expect(BSNumberHelper.formatNumber('-')).toBe('0')
      expect(BSNumberHelper.formatNumber(-0)).toBe('0')
      expect(BSNumberHelper.formatNumber('-.')).toBe('0')
      expect(BSNumberHelper.formatNumber('-2.2')).toBe('-2')
      expect(BSNumberHelper.formatNumber('-.0')).toBe('0')
      expect(BSNumberHelper.formatNumber('-0.')).toBe('0')
      expect(BSNumberHelper.formatNumber('-1.')).toBe('-1')
      expect(BSNumberHelper.formatNumber('-00023.002323000000')).toBe('-23')
      expect(BSNumberHelper.formatNumber()).toBe('0')
      expect(BSNumberHelper.formatNumber('-,')).toBe('0')
      expect(BSNumberHelper.formatNumber(NaN)).toBe('0')
    })
  })
})
